# -*- coding: utf-8 -*-
"""ANN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qr1bpuHwnJfkYwo0k6w8N6Scoozdt_Ox
"""

import tensorflow as tf

#Initialising ANN
ann = tf.keras.models.Sequential()
 #Adding First Hidden Layer
ann.add(tf.keras.layers.Dense(units=6,activation="relu"))
 #Adding Second Hidden Layer
ann.add(tf.keras.layers.Dense(units=6,activation="relu"))
#Adding Output Layer
ann.add(tf.keras.layers.Dense(units=1,activation="sigmoid"))
#Compiling ANN
ann.compile(optimizer="adam",loss="binary_crossentropy",metrics=['accuracy'])

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn import metrics
import seaborn as sns
from sklearn.metrics import classification_report
from sklearn.model_selection import StratifiedKFold

df = pd.read_csv('selected_data.csv')
df = df.sample(frac = 1).reset_index(drop=True)

X = df.iloc[:, :6].values
y = df["sepsis_icd"].values


skf = StratifiedKFold(n_splits=5,shuffle=True,random_state=2)

f1 = []
acc = []
p = []
r = []

class_names=[0,1]

for i,(train, test) in enumerate(skf.split(X,y)):

  X_train, X_test, y_train, y_test = X[train], X[test], y[train], y[test]
  history = ann.fit(X_train,y_train,batch_size=72,epochs = 100)
  y_pred = [1 if x >= 0.5 else 0 for x in ann.predict(X_test) ]
  f1.append(metrics.f1_score(y_test,y_pred))
  acc.append(metrics.accuracy_score(y_test, y_pred))
  p.append(metrics.precision_score(y_test,y_pred))
  r.append(metrics.recall_score(y_test,y_pred))

  cnf_matrix = metrics.confusion_matrix(y_test, y_pred)

  fig, ax = plt.subplots()
  tick_marks = np.arange(len(class_names))
  plt.xticks(tick_marks, class_names)
  plt.yticks(tick_marks, class_names)
  # create heatmap
  sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap="YlGnBu" ,fmt='g')
  ax.xaxis.set_label_position("top")
  plt.tight_layout()
  plt.title('Confusion matrix', y=1.1)
  plt.ylabel('Actual label')
  plt.xlabel('Predicted label')

for i in range(5):
  print("f1:" ,f1[i],"  acc:",acc[i], "  pre:",p[i], " r:", r[i])

X_train, X_test, y_train, y_test= 0 ,0,0,0
for i, (train, test) in enumerate(skf.split(X,y)):
  if (i == 4): 
    X_train, X_test, y_train, y_test = X[train], X[test], y[train], y[test]
    break;

print("p average: " , sum(p)/5)
print("r average: " , sum(r)/5)
print("f1 average: " , sum(f1)/5)
print("acc average: " , sum(acc)/5)